{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar ceil = require( '@stdlib/math-base-special-ceil' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar DEFAULT_INCREMENT = 1;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns evenly spaced numbers according to a specified increment.\n*\n* @param {number} start - starting value (inclusive)\n* @param {number} stop - stopping value (exclusive)\n* @param {number} [increment=1] - increment\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @throws {TypeError} third argument must be a number\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterIncrspace( 0, 100, 2 );\n*\n* var v = iter.next().value;\n* // returns 0\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 4\n*\n* // ...\n*/\nfunction iterIncrspace( start, stop, increment ) {\n\tvar iter;\n\tvar incr;\n\tvar FLG;\n\tvar N;\n\tvar i;\n\n\tif ( !isNumber( start ) || isnan( start ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number. Value: `%s`.', start ) );\n\t}\n\tif ( !isNumber( stop ) || isnan( stop ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', stop ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isNumber( increment ) || isnan( increment ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a number. Value: `%s`.', increment ) );\n\t\t}\n\t\tincr = increment;\n\t} else {\n\t\tincr = DEFAULT_INCREMENT;\n\t}\n\tN = ceil( (stop-start)/incr );\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': start + (i*incr),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterIncrspace( start, stop, incr );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterIncrspace;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which returns evenly spaced numbers according to a specified increment.\n*\n* @module @stdlib/iter-incrspace\n*\n* @example\n* var iterIncrspace = require( '@stdlib/iter-incrspace' );\n*\n* var iter = iterIncrspace( 0, 100, 2 );\n*\n* var v = iter.next().value;\n* // returns 0\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 4\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAiB,QAAS,yBAA0B,EACpDC,EAAO,QAAS,gCAAiC,EACjDC,EAAS,QAAS,uBAAwB,EAK1CC,EAAoB,EA8BxB,SAASC,EAAeC,EAAOC,EAAMC,EAAY,CAChD,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAK,CAACd,EAAUO,CAAM,GAAKN,EAAOM,CAAM,EACvC,MAAM,IAAI,UAAWH,EAAQ,kEAAmEG,CAAM,CAAE,EAEzG,GAAK,CAACP,EAAUQ,CAAK,GAAKP,EAAOO,CAAK,EACrC,MAAM,IAAI,UAAWJ,EAAQ,mEAAoEI,CAAK,CAAE,EAEzG,GAAK,UAAU,OAAS,EAAI,CAC3B,GAAK,CAACR,EAAUS,CAAU,GAAKR,EAAOQ,CAAU,EAC/C,MAAM,IAAI,UAAWL,EAAQ,kEAAmEK,CAAU,CAAE,EAE7GE,EAAOF,CACR,MACCE,EAAON,EAER,OAAAQ,EAAIV,GAAOK,EAAKD,GAAOI,CAAK,EAC5BG,EAAI,GAGJJ,EAAO,CAAC,EACRX,EAAaW,EAAM,OAAQK,CAAK,EAChChB,EAAaW,EAAM,SAAUM,CAAI,EAG5Bd,GACJH,EAAaW,EAAMR,EAAgBe,CAAQ,EAErCP,EAQP,SAASK,GAAO,CAEf,OADAD,GAAK,EACAF,GAAOE,GAAKD,EACT,CACN,KAAQ,EACT,EAEM,CACN,MAASN,EAASO,EAAEH,EACpB,KAAQ,EACT,CACD,CASA,SAASK,EAAKE,EAAQ,CAErB,OADAN,EAAM,GACD,UAAU,OACP,CACN,MAASM,EACT,KAAQ,EACT,EAEM,CACN,KAAQ,EACT,CACD,CAQA,SAASD,GAAU,CAClB,OAAOX,EAAeC,EAAOC,EAAMG,CAAK,CACzC,CACD,CAKAb,EAAO,QAAUQ,IC1GjB,IAAIa,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isNumber", "isnan", "iteratorSymbol", "ceil", "format", "DEFAULT_INCREMENT", "iterIncrspace", "start", "stop", "increment", "iter", "incr", "FLG", "N", "i", "next", "end", "factory", "value", "main"]
}
